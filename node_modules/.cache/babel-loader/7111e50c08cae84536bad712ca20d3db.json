{"ast":null,"code":"import { COMMENTS } from '../shared/comments';\nimport { DISHES } from '../shared/dishes';\nimport { LEADERS } from '../shared/leaders';\nimport { PROMOTIONS } from '../shared/promotions'; // state\n\nexport const initialState = {\n  comments: COMMENTS,\n  dishes: DISHES,\n  leaders: LEADERS,\n  promotions: PROMOTIONS\n}; // action\n// plain js obj with a type field that specifies how to\n// change something in the state\n\n/**\n * \n    Pure functions:     A function which is called Reducer in Redux,\n                     that take the current state and action and return a \n                     new state\n                        - Update data immutably ( do not modify inputs ) \n */\n\nexport const Reducer = (state = initialState, action) => {\n  return state;\n};","map":{"version":3,"sources":["/home/mayur/Desktop/Document/Company_Assignment/Header_Footer_and_Form/src/redux/reducer.js"],"names":["COMMENTS","DISHES","LEADERS","PROMOTIONS","initialState","comments","dishes","leaders","promotions","Reducer","state","action"],"mappings":"AAAA,SAASA,QAAT,QAAyB,oBAAzB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,sBAA3B,C,CAGA;;AACA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,QAAQ,EAAEL,QADc;AAExBM,EAAAA,MAAM,EAAEL,MAFgB;AAGxBM,EAAAA,OAAO,EAAEL,OAHe;AAIxBM,EAAAA,UAAU,EAAEL;AAJY,CAArB,C,CAQP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACrD,SAAOD,KAAP;AACH,CAFM","sourcesContent":["import { COMMENTS } from '../shared/comments'\nimport { DISHES } from '../shared/dishes'\nimport { LEADERS } from '../shared/leaders'\nimport { PROMOTIONS } from '../shared/promotions'\n\n\n// state\nexport const initialState = {\n    comments: COMMENTS,\n    dishes: DISHES,\n    leaders: LEADERS,\n    promotions: PROMOTIONS,\n};\n\n\n// action\n// plain js obj with a type field that specifies how to\n// change something in the state\n\n/**\n * \n    Pure functions:     A function which is called Reducer in Redux,\n                     that take the current state and action and return a \n                     new state\n                        - Update data immutably ( do not modify inputs ) \n */\nexport const Reducer = (state = initialState, action) => {\n    return state;\n};"]},"metadata":{},"sourceType":"module"}